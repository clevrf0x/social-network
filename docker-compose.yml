services:
  postgres:
    deploy:
      resources:
        limits:
          cpus: '${DOCKER_POSTGRES_CPUS:-0}'
          memory: '${DOCKER_POSTGRES_MEMORY:-0}'
    environment:
      - 'POSTGRES_DB=${POSTGRES_DB}'
      - 'POSTGRES_USER=${POSTGRES_USER}'
      - 'POSTGRES_PASSWORD=${POSTGRES_PASSWORD}'
    image: 'postgres:14.1-bullseye'
    restart: '${DOCKER_RESTART_POLICY:-unless-stopped}'
    # ports:
    #   - '${DOCKER_POSTGRES_PORT_FORWARD}:5432'
    command: postgres -c max_connections=300
    stop_grace_period: '3s'
    healthcheck:
      test: '${DOCKER_POSTGRES_HEALTHCHECK_TEST}'
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    volumes:
      - 'postgres:/var/lib/postgresql/data'
    networks:
      - internal_network

  api:
    build:
      context: .
      dockerfile: Dockerfile
      tags:
        - '${COMPOSE_PROJECT_NAME}:latest'
    image: '${COMPOSE_PROJECT_NAME}:latest'
    deploy:
      resources:
        limits:
          cpus: '${DOCKER_API_CPUS:-0}'
          memory: '${DOCKER_API_MEMORY:-0}'
    env_file:
      - '.env'
    depends_on:
      - postgres
    tty: true
    healthcheck:
      test: '${DOCKER_API_HEALTHCHECK_TEST}'
      interval: '60s'
      timeout: '3s'
      start_period: '5s'
      retries: 3
    stop_grace_period: '3s'
    restart: '${DOCKER_RESTART_POLICY:-unless-stopped}'
    ports:
      - '${DOCKER_API_PORT_FORWARD}:8000' 
    volumes:
      - '${DOCKER_API_VOLUME:-.:/app}'
    command: gunicorn --bind 0.0.0.0:8000 --access-logfile - --error-logfile - core.wsgi:application
    networks:
      - internal_network

volumes:
  postgres: {}

networks:
  internal_network:
    driver: bridge
